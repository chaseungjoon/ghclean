#!/usr/bin/env bash
set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]:-$0}")" >/dev/null 2>&1 && pwd)"
CFG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/ghclean"
KEYS_FILE="$CFG_DIR/keys.txt"
EXCEPTIONS_FILE="$CFG_DIR/exceptions.txt"
BLACKLIST_FILE="$CFG_DIR/blacklist.txt"
PYTHON_SCRIPT="$SCRIPT_DIR/githubapi.py"
REQ_FILE="$SCRIPT_DIR/requirements.txt"

ensure_cfg(){
  mkdir -p "$CFG_DIR"
  touch "$KEYS_FILE" "$EXCEPTIONS_FILE" "$BLACKLIST_FILE"
  [ -f "$KEYS_FILE" ] && chmod 600 "$KEYS_FILE" || true
}

add_users_to_file(){
  local file="$1"; shift
  for u in "$@"; do
    if [ -z "$u" ]; then continue; fi
    if ! grep -qxF "$u" "$file"; then
      echo "$u" >> "$file"
      echo "Added $u to $(basename "$file")"
    else
      echo "$u already in $(basename "$file")"
    fi
  done
}

show_help(){
  cat <<'EOF'
ghclean - manage GitHub follower/following cleanup

Usage:
  ghclean run
    Run the Python cleanup (reads ~/.config/ghclean/* files).

  ghclean -e username1 username2 ...
    Add username(s) to exceptions (you will always follow them).

  ghclean -b username1 username2 ...
    Add username(s) to blacklist (you will not follow them).

  ghclean view
    Show a prettified list of exceptions and blacklist usernames.

  ghclean setup
    Interactive setup:
    - checks Python dependencies from requirements.txt
    - installs them if missing
    - saves username & personal access token to ~/.config/ghclean/keys.txt

  ghclean -h
    Show this help message.
EOF
}

case "${1:-}" in
  (run)
    if [ ! -f "$PYTHON_SCRIPT" ]; then
      echo "Can't find githubapi.py at $PYTHON_SCRIPT"
      echo "If you installed via brew, the wrapper generated by the formula will handle this."
      exit 1
    fi
    shift || true
    python3 "$PYTHON_SCRIPT" "$@"
    ;;
  (view)
    ensure_cfg
      echo ""
      echo "============================="
      echo " EXCEPTIONS LIST"
      echo "============================="
      if [ -s "$EXCEPTIONS_FILE" ]; then
        n=1
        while IFS= read -r line; do
          [ -z "$line" ] && continue
          printf "  %2d. %s\n" "$n" "$line"
          n=$((n+1))
        done < "$EXCEPTIONS_FILE"
      else
        echo "  (empty)"
      fi
      echo ""
      echo "============================="
      echo " BLACKLIST LIST"
      echo "============================="
      if [ -s "$BLACKLIST_FILE" ]; then
        n=1
        while IFS= read -r line; do
          [ -z "$line" ] && continue
          printf "  %2d. %s\n" "$n" "$line"
          n=$((n+1))
        done < "$BLACKLIST_FILE"
      else
        echo "  (empty)"
      fi
      echo ""
      ;;
  (-e)
    shift || true
    if [ $# -eq 0 ]; then echo "No usernames provided."; exit 1; fi
    ensure_cfg
    add_users_to_file "$EXCEPTIONS_FILE" "$@"
    ;;
  (-b)
    shift || true
    if [ $# -eq 0 ]; then echo "No usernames provided."; exit 1; fi
    ensure_cfg
    add_users_to_file "$BLACKLIST_FILE" "$@"
    ;;
  (setup)
    ensure_cfg

    echo "Checking Python dependencies..."
    if command -v python3 >/dev/null 2>&1; then
      if ! python3 -c "import requests" >/dev/null 2>&1; then
        echo "Installing dependencies from requirements.txt..."
        if command -v pip3 >/dev/null 2>&1; then
          if [ -f "$REQ_FILE" ]; then
            pip3 install --user -r "$REQ_FILE"
          else
            echo "Warning: requirements.txt not found at $REQ_FILE"
          fi
        else
          echo "pip3 not found. Please install Python3 and pip first."
          exit 1
        fi
      else
        echo "All dependencies already satisfied."
      fi
    else
      echo "Python3 not found. Please install it first."
      exit 1
    fi

    read -r -p "Enter your GitHub username: " gh_user
    echo
    echo "Create a Personal access token (classic) with permission: user:follow (follow/unfollow)"
    read -s -r -p "Enter your personal access token: " gh_token
    echo
    printf "username=%s\n token=%s\n" "$gh_user" "$gh_token" > "$KEYS_FILE"
    chmod 600 "$KEYS_FILE"
    echo "Saved keys to $KEYS_FILE"
    ;;
  (-h|--help|"")
    show_help
    ;;
  (*)
    echo "Unknown command: $1"
    echo "Try 'ghclean -h' for help."
    exit 1
    ;;
esac